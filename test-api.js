// Script de test pour v√©rifier la connectivit√© avec l'API backend
const API_BASE_URL = 'http://localhost:8080/api';

async function testAPI() {
  console.log('üß™ Test de connectivit√© avec l\'API backend...');
  console.log('URL de base:', API_BASE_URL);

  try {
    // Test 1: Types de documents
    console.log('\nüìã Test 1: R√©cup√©ration des types de documents...');
    const typesResponse = await fetch(`${API_BASE_URL}/types-documents`);
    console.log('Status:', typesResponse.status);
    
    if (typesResponse.ok) {
      const types = await typesResponse.json();
      console.log('‚úÖ Types de documents r√©cup√©r√©s:', types.length, 'types');
      console.log('Premier type:', types[0]);
    } else {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des types de documents');
    }

    // Test 2: Citoyens
    console.log('\nüë• Test 2: R√©cup√©ration des citoyens...');
    const citoyensResponse = await fetch(`${API_BASE_URL}/citoyens`);
    console.log('Status:', citoyensResponse.status);
    
    if (citoyensResponse.ok) {
      const citoyens = await citoyensResponse.json();
      console.log('‚úÖ Citoyens r√©cup√©r√©s:', citoyens.length, 'citoyens');
      console.log('Premier citoyen:', citoyens[0]);
    } else {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des citoyens');
    }

    // Test 3: Demandes
    console.log('\nüìù Test 3: R√©cup√©ration des demandes...');
    const demandesResponse = await fetch(`${API_BASE_URL}/demandes`);
    console.log('Status:', demandesResponse.status);
    
    if (demandesResponse.ok) {
      const demandes = await demandesResponse.json();
      console.log('‚úÖ Demandes r√©cup√©r√©es:', demandes.length, 'demandes');
      console.log('Premi√®re demande:', demandes[0]);
    } else {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des demandes');
    }

    // Test 4: Municipalit√©s
    console.log('\nüèõÔ∏è Test 4: R√©cup√©ration des municipalit√©s...');
    const municipalitesResponse = await fetch(`${API_BASE_URL}/municipalites`);
    console.log('Status:', municipalitesResponse.status);
    
    if (municipalitesResponse.ok) {
      const municipalites = await municipalitesResponse.json();
      console.log('‚úÖ Municipalit√©s r√©cup√©r√©es:', municipalites.length, 'municipalit√©s');
      console.log('Premi√®re municipalit√©:', municipalites[0]);
    } else {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des municipalit√©s');
    }

    console.log('\nüéâ Tests termin√©s!');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message);
    console.log('\nüîß V√©rifications √† faire:');
    console.log('1. Le backend Spring Boot est-il d√©marr√© sur le port 8080?');
    console.log('2. La base de donn√©es PostgreSQL est-elle accessible?');
    console.log('3. Les donn√©es de test ont-elles √©t√© ins√©r√©es?');
    console.log('4. Le CORS est-il configur√© correctement?');
  }
}

// Ex√©cuter les tests
testAPI(); 